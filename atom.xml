<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aaron&#39;s blog</title>
  
  <subtitle>a wide reading of the lost teenager</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-28T08:28:27.778Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Aaron</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lua guide</title>
    <link href="http://yoursite.com/2018/08/28/lua/"/>
    <id>http://yoursite.com/2018/08/28/lua/</id>
    <published>2018-08-28T08:28:22.000Z</published>
    <updated>2018-08-28T08:28:27.778Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 单行注释</span><br><span class="line">-- Two dashes start a one-line comment.</span><br><span class="line"></span><br><span class="line">2. 多行注释</span><br><span class="line">--[[</span><br><span class="line">     Adding two [&apos;s and ]&apos;s makes it a</span><br><span class="line">     multi-line comment.</span><br><span class="line">--]]</span><br></pre></td></tr></table></figure><h4 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. 数字变量</span><br><span class="line">num = 42    -- All numbers are doubles, 64-bit doubles have 52 bits for int values</span><br><span class="line"></span><br><span class="line">2. string</span><br><span class="line">s1 = &apos;string1&apos;</span><br><span class="line">s2 = &quot;string2&quot;</span><br><span class="line">s3 = [[ Double brackets</span><br><span class="line">       start and end</span><br><span class="line">       multi-line strings.]]</span><br><span class="line">s4 = nil  -- Undefines s4; Lua has garbage collection.</span><br><span class="line"></span><br><span class="line">3. bool</span><br><span class="line">-- Only nil and false are falsy; 0 and &apos;&apos; are true!</span><br><span class="line">aBoolValue = false</span><br><span class="line"></span><br><span class="line">-- This is similar to the a?b:c operator in C/js</span><br><span class="line">ans = aBoolValue and &apos;yes&apos; or &apos;no&apos;  --&gt; &apos;no&apos;</span><br><span class="line"></span><br><span class="line">4. oters type</span><br><span class="line">foo = anUnknownVariable -- Undefined variables return nil.</span><br><span class="line"></span><br><span class="line">x, y, z = 1, 2, 3, 4    -- Now x = 1, y = 2, z = 3, and 4 is thrown.</span><br></pre></td></tr></table></figure><h4 id="3-代码块Blocks"><a href="#3-代码块Blocks" class="headerlink" title="3. 代码块Blocks"></a>3. 代码块Blocks</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1. if clauses</span><br><span class="line">if num &gt; 40 then</span><br><span class="line">  print(&apos;over 40&apos;)</span><br><span class="line">elseif s ~= &apos;walternate&apos; then  -- ~= is not equals.</span><br><span class="line">  -- Equality check is == like Python; ok for strs.</span><br><span class="line">  io.write(&apos;not over 40\n&apos;)  -- Defaults to stdout.</span><br><span class="line">else</span><br><span class="line">  -- Variables are global by default.</span><br><span class="line">  thisIsGlobal = 5  -- Camel case is common.</span><br><span class="line"></span><br><span class="line">  -- How to make a variable local:</span><br><span class="line">  local line = io.read()  -- Reads next stdin line.</span><br><span class="line"></span><br><span class="line">  -- String concatenation uses the .. operator:</span><br><span class="line">  print(&apos;Winter is coming, &apos; .. line)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">2. for clauses</span><br><span class="line">karlSum = 0</span><br><span class="line">for i = 1, 100 do  -- The range includes both ends.</span><br><span class="line">    karlSum = karlSum + i</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">fredSum = 0</span><br><span class="line">for j = 100, 1, -1 do   -- Use &quot;100, 1, -1&quot; as the range to count down.</span><br><span class="line">    fredSum = fredSum + j </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">3. while clauses</span><br><span class="line">while num &lt; 50 do</span><br><span class="line">  num = num + 1  -- No ++ or += type operators.</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1. define</span><br><span class="line">function fib(n)</span><br><span class="line">  if n &lt; 2 then return 1 end</span><br><span class="line">  return fib(n - 2) + fib(n - 1)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">2. anonymous functions</span><br><span class="line">function adder(x)</span><br><span class="line">  -- The returned function is created when adder is</span><br><span class="line">  -- called, and remembers the value of x:</span><br><span class="line">  return function (y) return x + y end</span><br><span class="line">end</span><br><span class="line">a1 = adder(9)</span><br><span class="line">a2 = adder(36)</span><br><span class="line">print(a1(16))  --&gt; 25</span><br><span class="line">print(a2(64))  --&gt; 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. Returns, func calls, and assignments</span><br><span class="line">x, y, z = 1, 2, 3, 4</span><br><span class="line">-- Now x = 1, y = 2, z = 3, and 4 is thrown away.</span><br><span class="line"></span><br><span class="line">function bar(a, b, c)</span><br><span class="line">  print(a, b, c)</span><br><span class="line">  return 4, 8, 15, 16, 23, 42</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">x, y = bar(&apos;zaphod&apos;)  --&gt; prints &quot;zaphod  nil nil&quot;</span><br><span class="line">-- Now x = 4, y = 8, values 15..42 are discarded.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. local functions </span><br><span class="line">function f(x) return x * x end</span><br><span class="line">f = function (x) return x * x end</span><br></pre></td></tr></table></figure><h4 id="5-表table"><a href="#5-表table" class="headerlink" title="5. 表table"></a>5. 表table</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. define</span><br><span class="line">-- Dict literals have string keys by default.</span><br><span class="line">t = &#123;key1 = &apos;value1&apos;, key2 = false&#125;</span><br><span class="line">print(t.key1)  -- Prints &apos;value1&apos;.</span><br><span class="line">t.newKey = &apos;&#123;&#125;&apos;  -- Adds a new key/value pair.</span><br><span class="line">t.key2 = nil   -- Removes key2 from the table.</span><br><span class="line"></span><br><span class="line">-- Literal notation for any (non-nil) value as key:</span><br><span class="line">u = &#123;[&apos;@!#&apos;] = &apos;qbert&apos;, [&apos;&#123;&#125;&apos;] = 1729, [6.28] = &apos;tau&apos;&#125;</span><br><span class="line">for key, val in pairs(u) do  -- Table iteration.</span><br><span class="line">  print(key, val)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- List literals implicitly set up int keys:</span><br><span class="line">v = &#123;&apos;value1&apos;, &apos;value2&apos;, 1.21, &apos;gigawatts&apos;&#125;</span><br><span class="line">for i = 1, #v do  -- #v is the size of v for lists.</span><br><span class="line">  print(v[i])  -- Indices start at 1 !! SO CRAZY!</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="6-模块modules"><a href="#6-模块modules" class="headerlink" title="6. 模块modules"></a>6. 模块modules</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- Suppose the file mod.lua looks like this.</span><br><span class="line">local M = &#123;&#125;</span><br><span class="line"></span><br><span class="line">local function sayMyName()</span><br><span class="line">  print(&apos;Hrunkner&apos;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function M.sayHello()</span><br><span class="line">  print(&apos;Why hello there&apos;)</span><br><span class="line">  sayMyName()</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">return M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- Another file can use mod.lua&apos;s functionality.</span><br><span class="line">local mod = require(&apos;mod&apos;)  -- Run the file mod.lua.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- This works because mod here = M in mod.lua.</span><br><span class="line">mod.sayHello()  -- Says hello to Hrunkner.</span><br><span class="line"></span><br><span class="line">-- This is wrong; sayMyName only exists in mod.lua</span><br><span class="line">mod.sayMyName()  -- error</span><br></pre></td></tr></table></figure><h4 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h4><p>The official <a href="http://www.lua.org/pil/contents.html" target="_blank" rel="noopener">Programming in Lua</a> book</p><p>The standard libraries</p><ul><li><a href="http://lua-users.org/wiki/StringLibraryTutorial" target="_blank" rel="noopener">string library</a></li><li><a href="http://lua-users.org/wiki/TableLibraryTutorial" target="_blank" rel="noopener">table library</a></li><li><a href="http://lua-users.org/wiki/MathLibraryTutorial" target="_blank" rel="noopener">math library</a></li><li><a href="http://lua-users.org/wiki/IoLibraryTutorial" target="_blank" rel="noopener">io library</a></li><li><a href="http://lua-users.org/wiki/OsLibraryTutorial" target="_blank" rel="noopener">os library</a></li></ul><p>The <a href="http://lua-users.org/files/wiki_insecure/users/thomasl/luarefv51.pdf" target="_blank" rel="noopener">Lua short reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-注释&quot;&gt;&lt;a href=&quot;#1-注释&quot; class=&quot;headerlink&quot; title=&quot;1. 注释&quot;&gt;&lt;/a&gt;1. 注释&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="IT•lua" scheme="http://yoursite.com/tags/IT%E2%80%A2lua/"/>
    
  </entry>
  
  <entry>
    <title>blockchain</title>
    <link href="http://yoursite.com/2018/03/19/blockchain/"/>
    <id>http://yoursite.com/2018/03/19/blockchain/</id>
    <published>2018-03-19T03:22:22.000Z</published>
    <updated>2018-08-28T08:42:58.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="区块链本质"><a href="#区块链本质" class="headerlink" title="区块链本质"></a>区块链本质</h3><p>区块链(blockchain)本质上是一个对等网络(peer-topeer)的分布式账本数据库。 区块链本身其实是一串链接的数据区块，其链接指针是采用密码学哈希算法对区块头进行处理所产生的区块头哈希值。</p><blockquote><p>区块链分类：<br>1.以参与方式分类：公开链(Public BlockChain)、联盟链(Consortium BlockChain)和私有链(Private BlockChain)。<br>2.以链与链的关系分类：主链和侧链。</p></blockquote><p>区块链系统包含技术：</p><p><img src="./../assets/img/blockchain.jpg" alt="区块链"></p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块链由一个个区块（block）组成。 每个区块一般包含区块头(Header)和区块体(Body)两部分。</p><p><img src="./../assets/img/block_struct.jpg" alt="区块结构"></p><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p>所谓挖矿，实际上是穷举随机数算法，把上个区块的哈希值加上10分钟内的全部交易单打包，再加上一个随机数，算出一个256位的字符串哈希值，输入的随机数Nonce使哈希值满足一定条件就获得这个区块的交易记账权。</p><blockquote><p>因此，挖矿实际是计算哈希值的过程，矿工则指计算哈希值的服务器。</p></blockquote><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><h3 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h3><p>要求在没有中心节点的情况下保证各个诚实节点记账的一致性。<br>区块链共识机制目前主要有4类：<br>1.POW<br>工作量证明机制<br>2.POS<br>3.DPOS<br>4.分布式一致性算法</p><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><ul><li>哈希函数性质</li></ul><blockquote><p>1．抗碰撞性<br>碰撞是指两个不同的消息在同一个哈希函数作用下，具有相同的哈希值。对于哈希值长度为256位的哈希函数，要找到碰撞对，平均需要完成2128次哈希计算，如果计算机每秒能够进行10000次哈希计算，则需要约1027年才能完成这2128次哈希计算。<br>2.原像不可逆性<br>原像不可逆是指知道输入值，很容易通过哈希函数计算出哈希值；但知道哈希值，没有办法计算出原来的输入值。</p></blockquote><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><ul><li>非对称加密算法</li></ul><blockquote><p>非对称加密算法指的就是存在一对数学相关的密钥，使用其中一个密钥进行加密的数据信息，只有使用另一个密钥才能对该信息进行解密。这对密钥中，对外公开的密钥叫作公钥，不公开的密钥就叫作私钥。打个比方来说，公钥就像银行的账户，私钥就像是该账户的密码或者账户所有者的签名。区块链之上的有效交易有一个用于交易发起方私钥签名有效的数字签名，而该交易的签名可以通过使用交易发起方的公钥进行验证。公钥可以通过算法从私钥中计算得出，但私钥却不能从公钥中推出。比特币系统中使用的就是一种非常典型的非对称加密算法——椭圆曲线加密算法（ECC）。</p></blockquote><ul><li>数字签名</li></ul><blockquote><p>数字签名就是在信息后面加上另一段内容，作为发送者的证明并且证明信息没有被篡改。一般是发送者将信息用哈希算法处理得出一个哈希值，然后用私钥对该哈希值进行加密，得出一个签名。然后发送者再将信息和签名一起发送给接收者。接收者使用发送者的公钥对签名进行解密，还原出哈希值，再通过哈希算法来验证信息的哈希值和解密签名还原出来的哈希值是否一致，从而可以鉴定信息是否来自发送者或验证信息是否被篡改。</p></blockquote><h3 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h3><ul><li>比特币获取</li></ul><blockquote><p>获取比特币有3中途径： 一是作为矿工挖矿获得，二是线上交易所购买或者线下通过中间人购买，三是作为商家收取比特币</p></blockquote><ul><li>哈希算法</li></ul><blockquote><p>比特币系统中最常采用的哈希函数是双SHA256哈希函数，通俗来说就是将不同长度的原始数据用两次SHA256哈希函数进行处理，再输出长度为256的二进制数字来进行统一的识别和存储。</p></blockquote><blockquote></blockquote><ul><li>加密算法</li></ul><blockquote><p> 比特币系统一般从操作系统底层的一个密码学安全的随机源中取出一个256位随机数作为私钥，私钥总数为2256个，所以很难通过遍历所有可能的私钥得出与公钥的对应的私钥。用户使用的私钥还会通过SHA256和Base58转换成易书写和识别的50位长度的私钥，公钥则首先由私钥和Secp256k1椭圆曲线算法生成65字节长度的随机数。一般情况下，比特币钱包的地址也由公钥所生成，其生成过程为首先将公钥进行SHA256和RIPEMD160双哈希运算，并生成20字节长度的摘要结果（即Hash160结果），这个将作为比特币地址的主体（body）信息，再在前面加上版本前缀0x00，在后面添加4个字节的地址校验码。地址校验码通过对摘要结果进行两次SHA256运算，取哈希值的前4位产生。最后通过Base58处理把连在一起的版本前缀、主体信息和校验码转换成可以容易让人识别的比特币字符地址。</p></blockquote><p><img src="./../assets/img/hash.jpg" alt="hash"></p><ul><li>工作量证明<blockquote><p> 要求得到的哈希结果（以十六进制的形式表示）以若干个0开头的。按照这个规则，由x=1出发，递增x的值，我们需要经过2688次哈希计算才能找到前3位均为0的哈希值，而要找到前6位均为0的哈希值，则需进行620969次哈希计算。也就是说，没有更快捷的方法来产生一个满足要求的哈希结果。这样通过哈希运算得出的符合特定要求的哈希值，可以作为共识算法中的工作量证明。</p></blockquote></li></ul><h3 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;区块链本质&quot;&gt;&lt;a href=&quot;#区块链本质&quot; class=&quot;headerlink&quot; title=&quot;区块链本质&quot;&gt;&lt;/a&gt;区块链本质&lt;/h3&gt;&lt;p&gt;区块链(blockchain)本质上是一个对等网络(peer-topeer)的分布式账本数据库。 区块链本身其实是一
      
    
    </summary>
    
    
      <category term="IT•blockchain" scheme="http://yoursite.com/tags/IT%E2%80%A2blockchain/"/>
    
  </entry>
  
  <entry>
    <title>git guide</title>
    <link href="http://yoursite.com/2018/03/17/git/"/>
    <id>http://yoursite.com/2018/03/17/git/</id>
    <published>2018-03-17T03:22:22.000Z</published>
    <updated>2018-08-28T08:32:48.534Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1. 基础命令"></a>1. 基础命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#初始化</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">#添加远程主机</span><br><span class="line">git remote add origin git@10.168.1.99:games/mahjong/40400000_ZuoPaiTuidaohu.git</span><br><span class="line"></span><br><span class="line">#创建分支dev</span><br><span class="line">git branch dev</span><br><span class="line"></span><br><span class="line">#查看所有分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">#切换到dev分支</span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">#创建并切换到dev分支</span><br><span class="line">git checkout -b dev</span><br><span class="line"></span><br><span class="line">#从远程分支test拉取到本地分支dev</span><br><span class="line">git pull origin test:dev</span><br><span class="line"></span><br><span class="line">#删除远程分支dev</span><br><span class="line">git push origin :dev</span><br><span class="line"></span><br><span class="line">#删除本地分支dev</span><br><span class="line">git branch -D dev</span><br></pre></td></tr></table></figure><h4 id="2-克隆远程分支"><a href="#2-克隆远程分支" class="headerlink" title="2. 克隆远程分支"></a>2. 克隆远程分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#从远程克隆master分支</span><br><span class="line">git clone git@10.168.1.99:games/mahjong/40400000_ZuoPaiTuidaohu.git</span><br><span class="line"></span><br><span class="line">#从远程克隆test分支</span><br><span class="line">git clone -b test git@10.168.1.99:games/mahjong/40400000_ZuoPaiTuidaohu.git</span><br><span class="line"></span><br><span class="line"># 从远程地址克隆test分支，包括子模块</span><br><span class="line">git clone -b test --recurse-submodules git@10.168.1.99:games/mahjong/40400000_ZuoPaiTuidaohu.git</span><br></pre></td></tr></table></figure><h4 id="3-推送、拉取分支"><a href="#3-推送、拉取分支" class="headerlink" title="3. 推送、拉取分支"></a>3. 推送、拉取分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#把本地分支dev推送到远程分支test</span><br><span class="line">git push origin dev:test</span><br><span class="line"></span><br><span class="line">#从远程分支test拉取到本地分支dev</span><br><span class="line">git pull origin test:dev</span><br></pre></td></tr></table></figure><h4 id="4-添加标签"><a href="#4-添加标签" class="headerlink" title="4. 添加标签"></a>4. 添加标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#查看日志</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">#查看所有标签</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line">#查看标签v0.001</span><br><span class="line">show v0.001</span><br><span class="line"></span><br><span class="line">#创建标签v0.001</span><br><span class="line">git tag -a &quot;v0.001&quot; -m &quot;add a tag&quot; f964e483576843b8e554a885fe2693aab89987f1  </span><br><span class="line"></span><br><span class="line">#把标签v0.001推送到远程</span><br><span class="line">git push origin v0.001</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-基础命令&quot;&gt;&lt;a href=&quot;#1-基础命令&quot; class=&quot;headerlink&quot; title=&quot;1. 基础命令&quot;&gt;&lt;/a&gt;1. 基础命令&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="IT•git" scheme="http://yoursite.com/tags/IT%E2%80%A2git/"/>
    
  </entry>
  
  <entry>
    <title>hexo + github page 搭建个人博客</title>
    <link href="http://yoursite.com/2018/03/13/hexo/"/>
    <id>http://yoursite.com/2018/03/13/hexo/</id>
    <published>2018-03-13T03:22:22.000Z</published>
    <updated>2018-03-19T01:58:32.951Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>下载并安装：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> </p><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><p>下载并安装：<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a> </p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g   #安装hexo   </span><br><span class="line">npm install hexo-deployer-git --save #部署到github page</span><br><span class="line"></span><br><span class="line">hexo init #初始化配置</span><br><span class="line"></span><br><span class="line">hexo g  #生成静态页面</span><br><span class="line">hexo s  #本地浏览器的localhost:4000 预览博文效果</span><br><span class="line"></span><br><span class="line">hexo g -d  #发布到github上</span><br></pre></td></tr></table></figure><h3 id="设置hexo主题"><a href="#设置hexo主题" class="headerlink" title="设置hexo主题"></a>设置hexo主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ git clone https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak.git themes/tranquilp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装node-js&quot;&gt;&lt;a href=&quot;#安装node-js&quot; class=&quot;headerlink&quot; title=&quot;安装node.js&quot;&gt;&lt;/a&gt;安装node.js&lt;/h3&gt;&lt;p&gt;下载并安装：&lt;a href=&quot;https://nodejs.org/en/&quot; tar
      
    
    </summary>
    
    
      <category term="IT•hexo" scheme="http://yoursite.com/tags/IT%E2%80%A2hexo/"/>
    
  </entry>
  
</feed>
